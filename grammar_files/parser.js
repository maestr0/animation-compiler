ledGrammar = (function () {
    "use strict";

    /*
     * Generated by PEG.js 0.9.0.
     *
     * http://pegjs.org/
     */

    function peg_subclass(child, parent) {
        function ctor() {
            this.constructor = child;
        }

        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function peg_SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";

        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, peg_SyntaxError);
        }
    }

    peg_subclass(peg_SyntaxError, Error);

    function pegParse(input) {
        console.log("PER PARSER INPUT: " + input);
        var options = arguments.length > 1 ? arguments[1] : {},
            parser = this,

            peg_FAILED = {},

            peg_startRuleFunctions = {start: peg_parsestart},
            peg_startRuleFunction = peg_parsestart,

            peg_c0 = "\n",
            peg_c1 = {type: "literal", value: "\n", description: "\"\\n\""},
            peg_c2 = " ",
            peg_c3 = {type: "literal", value: " ", description: "\" \""},
            peg_c4 = "\t",
            peg_c5 = {type: "literal", value: "\t", description: "\"\\t\""},
            peg_c6 = "debug",
            peg_c7 = {type: "literal", value: "debug", description: "\"debug\""},
            peg_c8 = function () {
                debug = true;
                return "debug mode";
            },
            peg_c9 = "show code",
            peg_c10 = {type: "literal", value: "show code", description: "\"show code\""},
            peg_c11 = function () {
                return {compiledProgram, enginesProgram};
            },
            peg_c12 = ";",
            peg_c13 = {type: "literal", value: ";", description: "\";\""},
            peg_c14 = "//",
            peg_c15 = {type: "literal", value: "//", description: "\"//\""},
            peg_c16 = /^[a-z 0-9 . , % _ = ' ( ) < >  ]/i,
            peg_c17 = {
                type: "class",
                value: "[a-z 0-9 . , % _ = ' ( ) < >  ]i",
                description: "[a-z 0-9 . , % _ = ' ( ) < >  ]i"
            },
            peg_c18 = function (comment) {
                var currentComment = comment.join("");
                if (debug)return currentComment;
            },
            peg_c19 = ".segment",
            peg_c20 = {type: "literal", value: ".segment", description: "\".segment\""},
            peg_c21 = /^[a-z 0-9]/i,
            peg_c22 = {type: "class", value: "[a-z 0-9]i", description: "[a-z 0-9]i"},
            peg_c23 = function (segment) {

                var segmentName = segment.join("").trim();

                enginesProgram.push({"name": segmentName, "position": currentPosition});
                currentSegment = segmentName;
                if (debug) return enginesProgram;

            },
            peg_c24 = "dw ",
            peg_c25 = {type: "literal", value: "dw ", description: "\"dw \""},
            peg_c26 = "ds ",
            peg_c27 = {type: "literal", value: "ds ", description: "\"ds \""},
            peg_c28 = function (directive, operand) {
                var compiledCode = 0x0000;

                switch (directive.toLowerCase()) {


                    case  'dw ' :
                        compiledCode = operand.toString(16); // makes sure that compiled code is 0
                        break;

                    case  'ds ' :
                        currentPosition = currentPosition + operand; // reserve operand bytes (8bit)
                        break;
                }

                compiledProgram.push({"key": currentPosition, "code": compiledCode});
                currentPosition++;
                if (debug) return {directive, operand, compiledCode};

            },
            peg_c29 = /^[^(' '\/':')]/i,
            peg_c30 = {type: "class", value: "[^(' '/':')]i", description: "[^(' '/':')]i"},
            peg_c31 = ":",
            peg_c32 = {type: "literal", value: ":", description: "\":\""},
            peg_c33 = function (labelName) {
                var name = labelName.join("");
                labels.push({"segment": currentSegment, "name": name, "position": currentPosition});
                if (debug) return {"name": name, "label array": labels};
            },
            peg_c34 = /^[a-z 0-9 _ ]/i,
            peg_c35 = {type: "class", value: "[a-z 0-9 _ ]i", description: "[a-z 0-9 _ ]i"},
            peg_c36 = function (labelName) {
                var currentLabel = labelName.join("").trim();
                return currentLabel;
            },
            peg_c37 = /^[a-h 0-9 . \-]/i,
            peg_c38 = {type: "class", value: "[a-h 0-9 . -]i", description: "[a-h 0-9 . -]i"},
            peg_c39 = function (digits) {

                var compiledNumber;
                var theNumber = digits.join("").trim();

                if (theNumber === 'e') compiledNumber = 4; //for external interrupt
                else if (theNumber.slice(-1) == 'h') compiledNumber = parseInt("0x" + theNumber.slice(0, -1), 16);
                else if (theNumber.indexOf('b') != -1) compiledNumber = binaryToNumber(digits.slice(0, digits.length - 2));
                else if (theNumber.indexOf('.') != -1) compiledNumber = parseFloat(theNumber);
                else   compiledNumber = parseInt(digits.join(''));

                return compiledNumber;
            },
            peg_c40 = "r",
            peg_c41 = {type: "literal", value: "r", description: "\"r\""},
            peg_c42 = /^[a-d]/i,
            peg_c43 = {type: "class", value: "[a-d]i", description: "[a-d]i"},
            peg_c44 = function (ledVar) {

                switch (ledVar.join('').toLowerCase()) {
                    case "ra":
                        return 0;
                        break;
                    case "rb":
                        return 1;
                        break;
                    case "rc":
                        return 2;
                        break;
                    case "rd":
                        return 3;
                        break;
                    default  :
                        return "error, variable name unknown, should be of the form rX where x is a letter";
                }
            },
            peg_c45 = "ramp",
            peg_c46 = {type: "literal", value: "ramp", description: "\"ramp\""},
            peg_c47 = ",",
            peg_c48 = {type: "literal", value: ",", description: "\",\""},
            peg_c49 = function (operand1, operand2) {
                var compiledCode = 0x0000;


                var timeToRamp = 0;
                if (operand1 < 1) {
                    timeToRamp = Math.round(operand1 * 8) << 2;
                }
                else if (operand1 == 1) timeToRamp = 0x10;
                else if (operand1 < 4) {
                    var above1 = Math.round(operand1);
                    var below1 = (operand1 - above1) * 10;
                    timeToRamp = (above1 * 16) + Math.round(below1);
                }
                else if (operand1 < 127) {
                    timeToRamp = Math.round(operand1);
                }
                else expected("max time for a ramp is 127 seconds");

                // FIXME: Math.abs(operand2) shouldn't be there, number should be encoded in binary with
                //        possibility of negative numbers (coded complement to1?)
                compiledCode = compiledCode + ( timeToRamp << 8) + Math.abs(operand2);
                compiledProgram.push({"key": currentPosition, "code": compiledCode.toString(16)});

                currentPosition++;
                if (debug) {
                    compiledCode, operand1 , operand2, timeToRamp, above1, below1
                }
                ;
            },
            peg_c50 = "wait ",
            peg_c51 = {type: "literal", value: "wait ", description: "\"wait \""},
            peg_c52 = function (operand1) {

                var compiledCode = 0x000;
                if (operand1 < 0.0002)     compiledCode = 0;
                else if (operand1 < 0.02) compiledCode = Math.round(0xFF0 * operand1);
                else if (operand1 < 0.08) compiledCode = 0x4200 + Math.round(100 * operand1 * 0x100);
                else if (operand1 < 0.484) compiledCode = 0x4C00 + ( Math.round(132 * (operand1 - 0.1)) << 8);
                else expected("a wait time below 0.484 seconds");


                compiledProgram.push({"key": currentPosition, "code": compiledCode.toString(16)});

                currentPosition++;

                if (debug) return {"wait": operand1, "compiled": compiledCode.toString(16)};
            },
            peg_c53 = "set_pwm ",
            peg_c54 = {type: "literal", value: "set_pwm ", description: "\"set_pwm \""},
            peg_c55 = function (operand1) {

                var compiledCode = (0x4000 + operand1).toString(16);
                compiledProgram.push({"key": currentPosition, "code": compiledCode});

                currentPosition++;

                if (debug) return {"set_PWM": operand1};
            },
            peg_c56 = "branch ",
            peg_c57 = {type: "literal", value: "branch ", description: "\"branch \""},
            peg_c58 = function (operand1, operand2) {
                var labelToBranchTo = operand2.trim();
                var addressToBranchTo = getLabelPosition(labelToBranchTo, currentPosition);
                var compiledInstruction = (0xA000 + (operand1 << 7 ) + addressToBranchTo ).toString(16);

                compiledProgram.push({"key": currentPosition, "code": compiledInstruction.toString(16)});

                currentPosition++;
                if (debug) return {"branch": compiledCode, addressToBranchTo};
            },
            peg_c59 = "mux_ld_start ",
            peg_c60 = {type: "literal", value: "mux_ld_start ", description: "\"mux_ld_start \""},
            peg_c61 = "mux_map_start ",
            peg_c62 = {type: "literal", value: "mux_map_start ", description: "\"mux_map_start \""},
            peg_c63 = "mux_ld_end ",
            peg_c64 = {type: "literal", value: "mux_ld_end ", description: "\"mux_ld_end \""},
            peg_c65 = "mux_ld_addr ",
            peg_c66 = {type: "literal", value: "mux_ld_addr ", description: "\"mux_ld_addr \""},
            peg_c67 = "mux_map_addr ",
            peg_c68 = {type: "literal", value: "mux_map_addr ", description: "\"mux_map_addr \""},
            peg_c69 = "mux_sel ",
            peg_c70 = {type: "literal", value: "mux_sel ", description: "\"mux_sel \""},
            peg_c71 = function (instruction, operand1) {


                var instructionName = instruction;
                var compiledInstruction = 0x0000;
                switch (instruction.toLowerCase()) {
                    case 'mux_ld_start ' :
                        compiledInstruction = 0x9E00;
                        break;
                    case 'mux_map_start ':
                        compiledInstruction = 0x9C00;
                        break;
                    case 'mux_ld_end '   :
                        compiledInstruction = 0x9C80;
                        break;
                    case 'mux_ld_addr '  :
                        compiledInstruction = 0x9F00;
                        break;
                    case 'mux_map_addr ' :
                        compiledInstruction = 0x9F80;
                        break;
                    case 'mux_sel '  :
                        compiledInstruction = 0x9D00;
                        break;
                    default:
                        return "error in mux instruction, check your spelling";
                }
                compiledInstruction = (compiledInstruction + getLabelPosition(operand1, currentPosition)).toString(16);
                var actualLabelPosition = getLabelPosition(operand1, currentPosition);
                compiledProgram.push({"key": currentPosition, "code": compiledInstruction});

                currentPosition++;
                if (debug) return {instructionName, operand1, actualLabelPosition, compiledInstruction};
            },
            peg_c72 = "mux_clr",
            peg_c73 = {type: "literal", value: "mux_clr", description: "\"mux_clr\""},
            peg_c74 = "mux_map_next",
            peg_c75 = {type: "literal", value: "mux_map_next", description: "\"mux_map_next\""},
            peg_c76 = "mux_map_prev",
            peg_c77 = {type: "literal", value: "mux_map_prev", description: "\"mux_map_prev\""},
            peg_c78 = "mux_ld_next",
            peg_c79 = {type: "literal", value: "mux_ld_next", description: "\"mux_ld_next\""},
            peg_c80 = "mux_ld_prev",
            peg_c81 = {type: "literal", value: "mux_ld_prev", description: "\"mux_ld_prev\""},
            peg_c82 = "rst",
            peg_c83 = {type: "literal", value: "rst", description: "\"rst\""},
            peg_c84 = "int",
            peg_c85 = {type: "literal", value: "int", description: "\"int\""},
            peg_c86 = "end",
            peg_c87 = {type: "literal", value: "end", description: "\"end\""},
            peg_c88 = function (instruction) {


                var compiledCode = 0x0000;
                switch (instruction.toLowerCase()) {
                    case 'mux_clr'     :
                        compiledCode = 0x9D00.toString(16);
                        break;
                    case 'mux_map_next':
                        compiledCode = 0x9D80.toString(16);
                        break;
                    case 'mux_map_prev':
                        compiledCode = 0x9DC0.toString(16);
                        break;
                    case 'mux_ld_next' :
                        compiledCode = 0x9D81.toString(16);
                        break;
                    case 'mux_ld_prev' :
                        compiledCode = 0x9DC1.toString(16);
                        break;
                    case 'rst'         :
                        compiledCode = 0x0000.toString(16);
                        break;
                    case 'int'         :
                        compiledCode = 0xC400.toString(16);
                        break;
                    case 'end'         :
                        compiledCode = 0xD000.toString(16);
                        break;
                    default:
                        expect("error in mux no operand, check your spelling");
                }

                compiledProgram.push({"key": currentPosition, "code": compiledCode});

                currentPosition++;

                if (debug) return instruction;
            },
            peg_c89 = "ld ",
            peg_c90 = {type: "literal", value: "ld ", description: "\"ld \""},
            peg_c91 = "add ",
            peg_c92 = {type: "literal", value: "add ", description: "\"add \""},
            peg_c93 = "sub ",
            peg_c94 = {type: "literal", value: "sub ", description: "\"sub \""},
            peg_c95 = function (instruction, operand1, operand2, op3) {
                var compiledCode = 0x0000;

                switch (instruction.toLowerCase()) {
                    case 'ld '  :
                        compiledCode = (0x9000 + (operand1 << 10) + operand2).toString(16);
                        break;
                    case 'add ' :
                        if (op3 == null) compiledCode = (0x9100 + operand1 + operand2).toString(16);
                        else             compiledCode = (0x9300 + operand2 + op3[3]).toString(16);
                        break;
                    case 'sub ' :
                        if (op3 == null) compiledCode = (0x9200 + operand1 + operand2).toString(16);
                        else             compiledCode = (0x9300 + operand2 + op3[3]).toString(16);
                        break;
                }

                compiledProgram.push({"key": currentPosition, "code": compiledCode});

                currentPosition++;
                return compiledCode;
            },
            peg_c96 = "trigger ",
            peg_c97 = {type: "literal", value: "trigger ", description: "\"trigger \""},
            peg_c98 = "w",
            peg_c99 = {type: "literal", value: "w", description: "\"w\""},
            peg_c100 = "s",
            peg_c101 = {type: "literal", value: "s", description: "\"s\""},
            peg_c102 = "{",
            peg_c103 = {type: "literal", value: "{", description: "\"{\""},
            peg_c104 = "}",
            peg_c105 = {type: "literal", value: "}", description: "\"}\""},
            peg_c106 = function (source, engine) {
                var targetOrSource = 0xE000;
                if (source.toLowerCase() === 'w') targetOrSource = 0xE000;

                var compiledCode = (targetOrSource + (engine - 1)).toString(16);
                compiledProgram.push({"key": currentPosition, "code": compiledCode});

                currentPosition++;
                return compiledCode;

            },
            peg_c107 = "jne ",
            peg_c108 = {type: "literal", value: "jne ", description: "\"jne \""},
            peg_c109 = "jl ",
            peg_c110 = {type: "literal", value: "jl ", description: "\"jl \""},
            peg_c111 = "jge ",
            peg_c112 = {type: "literal", value: "jge ", description: "\"jge \""},
            peg_c113 = "je ",
            peg_c114 = {type: "literal", value: "je ", description: "\"je \""},
            peg_c115 = function (instruction, operand1, operand2, operand3) {


                switch (instruction.toLowerCase()) {
                    case 'jne ' :
                        commandNumber = 0x8800;
                        break;
                    case 'jl '  :
                        commandNumber = 0x8A00;
                        break;
                    case 'jge ' :
                        commandNumber = 0x8C00;
                        break;
                    case 'je '  :
                        commandNumber = 0x8E00;
                        break;
                }

                var variableEncoded = (operand1 << 2) + operand2;
                var compiledCode = (commandNumber + variableEncoded).toString(16);
                forwardDeclaration.push({"name": operand3, "position": currentPosition});
                compiledProgram.push({"key": currentPosition, "code": compiledCode});

                currentPosition++;
                return compiledCode;
            },

            peg_currPos = 0,
            peg_savedPos = 0,
            peg_posDetailsCache = [{line: 1, column: 1, seenCR: false}],
            peg_maxFailPos = 0,
            peg_maxFailExpected = [],
            peg_silentFails = 0,

            peg_result;

        if ("startRule" in options) {
            if (!(options.startRule in peg_startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg_startRuleFunction = peg_startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg_savedPos, peg_currPos);
        }

        function location() {
            return peg_computeLocation(peg_savedPos, peg_currPos);
        }

        function expected(description) {
            throw peg_buildException(
                null,
                [{type: "other", description: description}],
                input.substring(peg_savedPos, peg_currPos),
                peg_computeLocation(peg_savedPos, peg_currPos)
            );
        }

        function error(message) {
            throw peg_buildException(
                message,
                null,
                input.substring(peg_savedPos, peg_currPos),
                peg_computeLocation(peg_savedPos, peg_currPos)
            );
        }

        function peg_computePosDetails(pos) {
            var details = peg_posDetailsCache[pos],
                p, ch;

            if (details) {
                return details;
            } else {
                p = pos - 1;
                while (!peg_posDetailsCache[p]) {
                    p--;
                }

                details = peg_posDetailsCache[p];
                details = {
                    line: details.line,
                    column: details.column,
                    seenCR: details.seenCR
                };

                while (p < pos) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) {
                            details.line++;
                        }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }

                    p++;
                }

                peg_posDetailsCache[pos] = details;
                return details;
            }
        }

        function peg_computeLocation(startPos, endPos) {
            var startPosDetails = peg_computePosDetails(startPos),
                endPosDetails = peg_computePosDetails(endPos);

            return {
                start: {
                    offset: startPos,
                    line: startPosDetails.line,
                    column: startPosDetails.column
                },
                end: {
                    offset: endPos,
                    line: endPosDetails.line,
                    column: endPosDetails.column
                }
            };
        }

        function peg_fail(expected) {
            if (peg_currPos < peg_maxFailPos) {
                return;
            }

            if (peg_currPos > peg_maxFailPos) {
                peg_maxFailPos = peg_currPos;
                peg_maxFailExpected = [];
            }

            peg_maxFailExpected.push(expected);
        }

        function peg_buildException(message, expected, found, location) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function (a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) {
                        return ch.charCodeAt(0).toString(16).toUpperCase();
                    }

                    return s
                        .replace(/\\/g, '\\\\')
                        .replace(/"/g, '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g, '\\t')
                        .replace(/\n/g, '\\n')
                        .replace(/\f/g, '\\f')
                        .replace(/\r/g, '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
                            return '\\x0' + hex(ch);
                        })
                        .replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
                            return '\\x' + hex(ch);
                        })
                        .replace(/[\u0100-\u0FFF]/g, function (ch) {
                            return '\\u0' + hex(ch);
                        })
                        .replace(/[\u1000-\uFFFF]/g, function (ch) {
                            return '\\u' + hex(ch);
                        });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                + " or "
                + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new peg_SyntaxError(
                message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                location
            );
        }

        function peg_parsestart() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg_currPos;
            s1 = peg_parseinstruction();
            if (s1 !== peg_FAILED) {
                s2 = [];
                s3 = peg_currPos;
                if (input.charCodeAt(peg_currPos) === 10) {
                    s4 = peg_c0;
                    peg_currPos++;
                } else {
                    s4 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c1);
                    }
                }
                if (s4 !== peg_FAILED) {
                    s5 = peg_parseinstruction();
                    if (s5 !== peg_FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    } else {
                        peg_currPos = s3;
                        s3 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s3;
                    s3 = peg_FAILED;
                }
                while (s3 !== peg_FAILED) {
                    s2.push(s3);
                    s3 = peg_currPos;
                    if (input.charCodeAt(peg_currPos) === 10) {
                        s4 = peg_c0;
                        peg_currPos++;
                    } else {
                        s4 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c1);
                        }
                    }
                    if (s4 !== peg_FAILED) {
                        s5 = peg_parseinstruction();
                        if (s5 !== peg_FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg_currPos = s3;
                            s3 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s3;
                        s3 = peg_FAILED;
                    }
                }
                if (s2 !== peg_FAILED) {
                    if (input.charCodeAt(peg_currPos) === 10) {
                        s3 = peg_c0;
                        peg_currPos++;
                    } else {
                        s3 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c1);
                        }
                    }
                    if (s3 === peg_FAILED) {
                        s3 = null;
                    }
                    if (s3 !== peg_FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parseinstruction() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg_currPos;
            s1 = [];
            s2 = peg_parsespace();
            while (s2 !== peg_FAILED) {
                s1.push(s2);
                s2 = peg_parsespace();
            }
            if (s1 !== peg_FAILED) {
                s2 = peg_parselabelDeclaration();
                if (s2 === peg_FAILED) {
                    s2 = null;
                }
                if (s2 !== peg_FAILED) {
                    s3 = [];
                    s4 = peg_parsespace();
                    while (s4 !== peg_FAILED) {
                        s3.push(s4);
                        s4 = peg_parsespace();
                    }
                    if (s3 !== peg_FAILED) {
                        s4 = peg_parsecommand();
                        if (s4 === peg_FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg_FAILED) {
                            s5 = [];
                            s6 = peg_parsespace();
                            while (s6 !== peg_FAILED) {
                                s5.push(s6);
                                s6 = peg_parsespace();
                            }
                            if (s5 !== peg_FAILED) {
                                s6 = peg_parseledComment();
                                if (s6 === peg_FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg_FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6];
                                    s0 = s1;
                                } else {
                                    peg_currPos = s0;
                                    s0 = peg_FAILED;
                                }
                            } else {
                                peg_currPos = s0;
                                s0 = peg_FAILED;
                            }
                        } else {
                            peg_currPos = s0;
                            s0 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parsespace() {
            var s0;

            if (input.charCodeAt(peg_currPos) === 32) {
                s0 = peg_c2;
                peg_currPos++;
            } else {
                s0 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c3);
                }
            }
            if (s0 === peg_FAILED) {
                if (input.charCodeAt(peg_currPos) === 9) {
                    s0 = peg_c4;
                    peg_currPos++;
                } else {
                    s0 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c5);
                    }
                }
            }

            return s0;
        }

        function peg_parsecommand() {
            var s0;

            s0 = peg_parsedebug();
            if (s0 === peg_FAILED) {
                s0 = peg_parseshowCompiled();
                if (s0 === peg_FAILED) {
                    s0 = peg_parselabelDeclaration();
                    if (s0 === peg_FAILED) {
                        s0 = peg_parseledDirective();
                        if (s0 === peg_FAILED) {
                            s0 = peg_parseledSegment();
                            if (s0 === peg_FAILED) {
                                s0 = peg_parsemux_with_operand();
                                if (s0 === peg_FAILED) {
                                    s0 = peg_parseledSetPwn();
                                    if (s0 === peg_FAILED) {
                                        s0 = peg_parseinstruction_no_operand();
                                        if (s0 === peg_FAILED) {
                                            s0 = peg_parsedata_operations();
                                            if (s0 === peg_FAILED) {
                                                s0 = peg_parsetrigger_command();
                                                if (s0 === peg_FAILED) {
                                                    s0 = peg_parsejump_command();
                                                    if (s0 === peg_FAILED) {
                                                        s0 = peg_parsewaitInstruction();
                                                        if (s0 === peg_FAILED) {
                                                            s0 = peg_parserampInstruction();
                                                            if (s0 === peg_FAILED) {
                                                                s0 = peg_parsebranchCommand();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg_parsedebug() {
            var s0, s1;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 5).toLowerCase() === peg_c6) {
                s1 = input.substr(peg_currPos, 5);
                peg_currPos += 5;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c7);
                }
            }
            if (s1 !== peg_FAILED) {
                peg_savedPos = s0;
                s1 = peg_c8();
            }
            s0 = s1;

            return s0;
        }

        function peg_parseshowCompiled() {
            var s0, s1;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 9).toLowerCase() === peg_c9) {
                s1 = input.substr(peg_currPos, 9);
                peg_currPos += 9;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c10);
                }
            }
            if (s1 !== peg_FAILED) {
                peg_savedPos = s0;
                s1 = peg_c11();
            }
            s0 = s1;

            return s0;
        }

        function peg_parseledComment() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg_currPos;
            s1 = [];
            s2 = peg_parsespace();
            while (s2 !== peg_FAILED) {
                s1.push(s2);
                s2 = peg_parsespace();
            }
            if (s1 !== peg_FAILED) {
                if (input.charCodeAt(peg_currPos) === 59) {
                    s2 = peg_c12;
                    peg_currPos++;
                } else {
                    s2 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c13);
                    }
                }
                if (s2 === peg_FAILED) {
                    if (input.substr(peg_currPos, 2) === peg_c14) {
                        s2 = peg_c14;
                        peg_currPos += 2;
                    } else {
                        s2 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c15);
                        }
                    }
                }
                if (s2 !== peg_FAILED) {
                    s3 = [];
                    s4 = peg_parsespace();
                    while (s4 !== peg_FAILED) {
                        s3.push(s4);
                        s4 = peg_parsespace();
                    }
                    if (s3 !== peg_FAILED) {
                        s4 = [];
                        if (peg_c16.test(input.charAt(peg_currPos))) {
                            s5 = input.charAt(peg_currPos);
                            peg_currPos++;
                        } else {
                            s5 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c17);
                            }
                        }
                        while (s5 !== peg_FAILED) {
                            s4.push(s5);
                            if (peg_c16.test(input.charAt(peg_currPos))) {
                                s5 = input.charAt(peg_currPos);
                                peg_currPos++;
                            } else {
                                s5 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c17);
                                }
                            }
                        }
                        if (s4 !== peg_FAILED) {
                            s5 = [];
                            s6 = peg_parsespace();
                            while (s6 !== peg_FAILED) {
                                s5.push(s6);
                                s6 = peg_parsespace();
                            }
                            if (s5 !== peg_FAILED) {
                                peg_savedPos = s0;
                                s1 = peg_c18(s4);
                                s0 = s1;
                            } else {
                                peg_currPos = s0;
                                s0 = peg_FAILED;
                            }
                        } else {
                            peg_currPos = s0;
                            s0 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parseledSegment() {
            var s0, s1, s2, s3, s4;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 8) === peg_c19) {
                s1 = peg_c19;
                peg_currPos += 8;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c20);
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = [];
                s3 = peg_parsespace();
                while (s3 !== peg_FAILED) {
                    s2.push(s3);
                    s3 = peg_parsespace();
                }
                if (s2 !== peg_FAILED) {
                    s3 = [];
                    if (peg_c21.test(input.charAt(peg_currPos))) {
                        s4 = input.charAt(peg_currPos);
                        peg_currPos++;
                    } else {
                        s4 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c22);
                        }
                    }
                    while (s4 !== peg_FAILED) {
                        s3.push(s4);
                        if (peg_c21.test(input.charAt(peg_currPos))) {
                            s4 = input.charAt(peg_currPos);
                            peg_currPos++;
                        } else {
                            s4 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c22);
                            }
                        }
                    }
                    if (s3 !== peg_FAILED) {
                        peg_savedPos = s0;
                        s1 = peg_c23(s3);
                        s0 = s1;
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parseledDirective() {
            var s0, s1, s2;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 3).toLowerCase() === peg_c24) {
                s1 = input.substr(peg_currPos, 3);
                peg_currPos += 3;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c25);
                }
            }
            if (s1 === peg_FAILED) {
                if (input.substr(peg_currPos, 3).toLowerCase() === peg_c26) {
                    s1 = input.substr(peg_currPos, 3);
                    peg_currPos += 3;
                } else {
                    s1 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c27);
                    }
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = peg_parsenumber();
                if (s2 !== peg_FAILED) {
                    peg_savedPos = s0;
                    s1 = peg_c28(s1, s2);
                    s0 = s1;
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parselabelDeclaration() {
            var s0, s1, s2;

            s0 = peg_currPos;
            s1 = [];
            if (peg_c29.test(input.charAt(peg_currPos))) {
                s2 = input.charAt(peg_currPos);
                peg_currPos++;
            } else {
                s2 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c30);
                }
            }
            while (s2 !== peg_FAILED) {
                s1.push(s2);
                if (peg_c29.test(input.charAt(peg_currPos))) {
                    s2 = input.charAt(peg_currPos);
                    peg_currPos++;
                } else {
                    s2 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c30);
                    }
                }
            }
            if (s1 !== peg_FAILED) {
                if (input.charCodeAt(peg_currPos) === 58) {
                    s2 = peg_c31;
                    peg_currPos++;
                } else {
                    s2 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c32);
                    }
                }
                if (s2 !== peg_FAILED) {
                    peg_savedPos = s0;
                    s1 = peg_c33(s1);
                    s0 = s1;
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parseledLabelName() {
            var s0, s1, s2, s3;

            s0 = peg_currPos;
            s1 = [];
            if (peg_c34.test(input.charAt(peg_currPos))) {
                s2 = input.charAt(peg_currPos);
                peg_currPos++;
            } else {
                s2 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c35);
                }
            }
            if (s2 !== peg_FAILED) {
                while (s2 !== peg_FAILED) {
                    s1.push(s2);
                    if (peg_c34.test(input.charAt(peg_currPos))) {
                        s2 = input.charAt(peg_currPos);
                        peg_currPos++;
                    } else {
                        s2 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c35);
                        }
                    }
                }
            } else {
                s1 = peg_FAILED;
            }
            if (s1 !== peg_FAILED) {
                s2 = [];
                if (input.charCodeAt(peg_currPos) === 32) {
                    s3 = peg_c2;
                    peg_currPos++;
                } else {
                    s3 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c3);
                    }
                }
                while (s3 !== peg_FAILED) {
                    s2.push(s3);
                    if (input.charCodeAt(peg_currPos) === 32) {
                        s3 = peg_c2;
                        peg_currPos++;
                    } else {
                        s3 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c3);
                        }
                    }
                }
                if (s2 !== peg_FAILED) {
                    peg_savedPos = s0;
                    s1 = peg_c36(s1);
                    s0 = s1;
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parsenumber() {
            var s0, s1, s2;

            s0 = peg_currPos;
            s1 = [];
            if (peg_c37.test(input.charAt(peg_currPos))) {
                s2 = input.charAt(peg_currPos);
                peg_currPos++;
            } else {
                s2 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c38);
                }
            }
            if (s2 !== peg_FAILED) {
                while (s2 !== peg_FAILED) {
                    s1.push(s2);
                    if (peg_c37.test(input.charAt(peg_currPos))) {
                        s2 = input.charAt(peg_currPos);
                        peg_currPos++;
                    } else {
                        s2 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c38);
                        }
                    }
                }
            } else {
                s1 = peg_FAILED;
            }
            if (s1 !== peg_FAILED) {
                peg_savedPos = s0;
                s1 = peg_c39(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg_parseledVariable() {
            var s0, s1, s2, s3, s4;

            s0 = peg_currPos;
            s1 = peg_currPos;
            if (input.charCodeAt(peg_currPos) === 114) {
                s2 = peg_c40;
                peg_currPos++;
            } else {
                s2 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c41);
                }
            }
            if (s2 !== peg_FAILED) {
                s3 = [];
                if (peg_c42.test(input.charAt(peg_currPos))) {
                    s4 = input.charAt(peg_currPos);
                    peg_currPos++;
                } else {
                    s4 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c43);
                    }
                }
                if (s4 !== peg_FAILED) {
                    while (s4 !== peg_FAILED) {
                        s3.push(s4);
                        if (peg_c42.test(input.charAt(peg_currPos))) {
                            s4 = input.charAt(peg_currPos);
                            peg_currPos++;
                        } else {
                            s4 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c43);
                            }
                        }
                    }
                } else {
                    s3 = peg_FAILED;
                }
                if (s3 !== peg_FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg_currPos = s1;
                    s1 = peg_FAILED;
                }
            } else {
                peg_currPos = s1;
                s1 = peg_FAILED;
            }
            if (s1 !== peg_FAILED) {
                peg_savedPos = s0;
                s1 = peg_c44(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg_parserampInstruction() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 4) === peg_c45) {
                s1 = peg_c45;
                peg_currPos += 4;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c46);
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = [];
                s3 = peg_parsespace();
                while (s3 !== peg_FAILED) {
                    s2.push(s3);
                    s3 = peg_parsespace();
                }
                if (s2 !== peg_FAILED) {
                    s3 = peg_parsenumber();
                    if (s3 !== peg_FAILED) {
                        s4 = [];
                        s5 = peg_parsespace();
                        while (s5 !== peg_FAILED) {
                            s4.push(s5);
                            s5 = peg_parsespace();
                        }
                        if (s4 !== peg_FAILED) {
                            if (input.charCodeAt(peg_currPos) === 44) {
                                s5 = peg_c47;
                                peg_currPos++;
                            } else {
                                s5 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c48);
                                }
                            }
                            if (s5 !== peg_FAILED) {
                                s6 = [];
                                s7 = peg_parsespace();
                                while (s7 !== peg_FAILED) {
                                    s6.push(s7);
                                    s7 = peg_parsespace();
                                }
                                if (s6 !== peg_FAILED) {
                                    s7 = peg_parsenumber();
                                    if (s7 !== peg_FAILED) {
                                        peg_savedPos = s0;
                                        s1 = peg_c49(s3, s7);
                                        s0 = s1;
                                    } else {
                                        peg_currPos = s0;
                                        s0 = peg_FAILED;
                                    }
                                } else {
                                    peg_currPos = s0;
                                    s0 = peg_FAILED;
                                }
                            } else {
                                peg_currPos = s0;
                                s0 = peg_FAILED;
                            }
                        } else {
                            peg_currPos = s0;
                            s0 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parsewaitInstruction() {
            var s0, s1, s2;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 5).toLowerCase() === peg_c50) {
                s1 = input.substr(peg_currPos, 5);
                peg_currPos += 5;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c51);
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = peg_parsenumber();
                if (s2 !== peg_FAILED) {
                    peg_savedPos = s0;
                    s1 = peg_c52(s2);
                    s0 = s1;
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parseledSetPwn() {
            var s0, s1, s2;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 8).toLowerCase() === peg_c53) {
                s1 = input.substr(peg_currPos, 8);
                peg_currPos += 8;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c54);
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = peg_parsenumber();
                if (s2 === peg_FAILED) {
                    s2 = peg_parseledVariable();
                }
                if (s2 !== peg_FAILED) {
                    peg_savedPos = s0;
                    s1 = peg_c55(s2);
                    s0 = s1;
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parsebranchCommand() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 7).toLowerCase() === peg_c56) {
                s1 = input.substr(peg_currPos, 7);
                peg_currPos += 7;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c57);
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = [];
                if (input.charCodeAt(peg_currPos) === 32) {
                    s3 = peg_c2;
                    peg_currPos++;
                } else {
                    s3 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c3);
                    }
                }
                while (s3 !== peg_FAILED) {
                    s2.push(s3);
                    if (input.charCodeAt(peg_currPos) === 32) {
                        s3 = peg_c2;
                        peg_currPos++;
                    } else {
                        s3 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c3);
                        }
                    }
                }
                if (s2 !== peg_FAILED) {
                    s3 = peg_parsenumber();
                    if (s3 !== peg_FAILED) {
                        s4 = [];
                        if (input.charCodeAt(peg_currPos) === 32) {
                            s5 = peg_c2;
                            peg_currPos++;
                        } else {
                            s5 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c3);
                            }
                        }
                        while (s5 !== peg_FAILED) {
                            s4.push(s5);
                            if (input.charCodeAt(peg_currPos) === 32) {
                                s5 = peg_c2;
                                peg_currPos++;
                            } else {
                                s5 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c3);
                                }
                            }
                        }
                        if (s4 !== peg_FAILED) {
                            if (input.charCodeAt(peg_currPos) === 44) {
                                s5 = peg_c47;
                                peg_currPos++;
                            } else {
                                s5 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c48);
                                }
                            }
                            if (s5 !== peg_FAILED) {
                                s6 = [];
                                if (input.charCodeAt(peg_currPos) === 32) {
                                    s7 = peg_c2;
                                    peg_currPos++;
                                } else {
                                    s7 = peg_FAILED;
                                    if (peg_silentFails === 0) {
                                        peg_fail(peg_c3);
                                    }
                                }
                                while (s7 !== peg_FAILED) {
                                    s6.push(s7);
                                    if (input.charCodeAt(peg_currPos) === 32) {
                                        s7 = peg_c2;
                                        peg_currPos++;
                                    } else {
                                        s7 = peg_FAILED;
                                        if (peg_silentFails === 0) {
                                            peg_fail(peg_c3);
                                        }
                                    }
                                }
                                if (s6 !== peg_FAILED) {
                                    s7 = peg_parseledLabelName();
                                    if (s7 !== peg_FAILED) {
                                        peg_savedPos = s0;
                                        s1 = peg_c58(s3, s7);
                                        s0 = s1;
                                    } else {
                                        peg_currPos = s0;
                                        s0 = peg_FAILED;
                                    }
                                } else {
                                    peg_currPos = s0;
                                    s0 = peg_FAILED;
                                }
                            } else {
                                peg_currPos = s0;
                                s0 = peg_FAILED;
                            }
                        } else {
                            peg_currPos = s0;
                            s0 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parsemux_with_operand() {
            var s0, s1, s2;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 13).toLowerCase() === peg_c59) {
                s1 = input.substr(peg_currPos, 13);
                peg_currPos += 13;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c60);
                }
            }
            if (s1 === peg_FAILED) {
                if (input.substr(peg_currPos, 14).toLowerCase() === peg_c61) {
                    s1 = input.substr(peg_currPos, 14);
                    peg_currPos += 14;
                } else {
                    s1 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c62);
                    }
                }
                if (s1 === peg_FAILED) {
                    if (input.substr(peg_currPos, 11).toLowerCase() === peg_c63) {
                        s1 = input.substr(peg_currPos, 11);
                        peg_currPos += 11;
                    } else {
                        s1 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c64);
                        }
                    }
                    if (s1 === peg_FAILED) {
                        if (input.substr(peg_currPos, 12).toLowerCase() === peg_c65) {
                            s1 = input.substr(peg_currPos, 12);
                            peg_currPos += 12;
                        } else {
                            s1 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c66);
                            }
                        }
                        if (s1 === peg_FAILED) {
                            if (input.substr(peg_currPos, 13).toLowerCase() === peg_c67) {
                                s1 = input.substr(peg_currPos, 13);
                                peg_currPos += 13;
                            } else {
                                s1 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c68);
                                }
                            }
                            if (s1 === peg_FAILED) {
                                if (input.substr(peg_currPos, 8).toLowerCase() === peg_c69) {
                                    s1 = input.substr(peg_currPos, 8);
                                    peg_currPos += 8;
                                } else {
                                    s1 = peg_FAILED;
                                    if (peg_silentFails === 0) {
                                        peg_fail(peg_c70);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = peg_parseledLabelName();
                if (s2 !== peg_FAILED) {
                    peg_savedPos = s0;
                    s1 = peg_c71(s1, s2);
                    s0 = s1;
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parseinstruction_no_operand() {
            var s0, s1;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 7).toLowerCase() === peg_c72) {
                s1 = input.substr(peg_currPos, 7);
                peg_currPos += 7;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c73);
                }
            }
            if (s1 === peg_FAILED) {
                if (input.substr(peg_currPos, 12).toLowerCase() === peg_c74) {
                    s1 = input.substr(peg_currPos, 12);
                    peg_currPos += 12;
                } else {
                    s1 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c75);
                    }
                }
                if (s1 === peg_FAILED) {
                    if (input.substr(peg_currPos, 12).toLowerCase() === peg_c76) {
                        s1 = input.substr(peg_currPos, 12);
                        peg_currPos += 12;
                    } else {
                        s1 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c77);
                        }
                    }
                    if (s1 === peg_FAILED) {
                        if (input.substr(peg_currPos, 11).toLowerCase() === peg_c78) {
                            s1 = input.substr(peg_currPos, 11);
                            peg_currPos += 11;
                        } else {
                            s1 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c79);
                            }
                        }
                        if (s1 === peg_FAILED) {
                            if (input.substr(peg_currPos, 11).toLowerCase() === peg_c80) {
                                s1 = input.substr(peg_currPos, 11);
                                peg_currPos += 11;
                            } else {
                                s1 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c81);
                                }
                            }
                            if (s1 === peg_FAILED) {
                                if (input.substr(peg_currPos, 3).toLowerCase() === peg_c82) {
                                    s1 = input.substr(peg_currPos, 3);
                                    peg_currPos += 3;
                                } else {
                                    s1 = peg_FAILED;
                                    if (peg_silentFails === 0) {
                                        peg_fail(peg_c83);
                                    }
                                }
                                if (s1 === peg_FAILED) {
                                    if (input.substr(peg_currPos, 3).toLowerCase() === peg_c84) {
                                        s1 = input.substr(peg_currPos, 3);
                                        peg_currPos += 3;
                                    } else {
                                        s1 = peg_FAILED;
                                        if (peg_silentFails === 0) {
                                            peg_fail(peg_c85);
                                        }
                                    }
                                    if (s1 === peg_FAILED) {
                                        if (input.substr(peg_currPos, 3).toLowerCase() === peg_c86) {
                                            s1 = input.substr(peg_currPos, 3);
                                            peg_currPos += 3;
                                        } else {
                                            s1 = peg_FAILED;
                                            if (peg_silentFails === 0) {
                                                peg_fail(peg_c87);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (s1 !== peg_FAILED) {
                peg_savedPos = s0;
                s1 = peg_c88(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg_parsedata_operations() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 3).toLowerCase() === peg_c89) {
                s1 = input.substr(peg_currPos, 3);
                peg_currPos += 3;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c90);
                }
            }
            if (s1 === peg_FAILED) {
                if (input.substr(peg_currPos, 4).toLowerCase() === peg_c91) {
                    s1 = input.substr(peg_currPos, 4);
                    peg_currPos += 4;
                } else {
                    s1 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c92);
                    }
                }
                if (s1 === peg_FAILED) {
                    if (input.substr(peg_currPos, 4).toLowerCase() === peg_c93) {
                        s1 = input.substr(peg_currPos, 4);
                        peg_currPos += 4;
                    } else {
                        s1 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c94);
                        }
                    }
                    if (s1 === peg_FAILED) {
                        if (input.substr(peg_currPos, 12).toLowerCase() === peg_c65) {
                            s1 = input.substr(peg_currPos, 12);
                            peg_currPos += 12;
                        } else {
                            s1 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c66);
                            }
                        }
                        if (s1 === peg_FAILED) {
                            if (input.substr(peg_currPos, 13).toLowerCase() === peg_c67) {
                                s1 = input.substr(peg_currPos, 13);
                                peg_currPos += 13;
                            } else {
                                s1 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c68);
                                }
                            }
                        }
                    }
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = peg_parseledVariable();
                if (s2 !== peg_FAILED) {
                    s3 = [];
                    if (input.charCodeAt(peg_currPos) === 32) {
                        s4 = peg_c2;
                        peg_currPos++;
                    } else {
                        s4 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c3);
                        }
                    }
                    while (s4 !== peg_FAILED) {
                        s3.push(s4);
                        if (input.charCodeAt(peg_currPos) === 32) {
                            s4 = peg_c2;
                            peg_currPos++;
                        } else {
                            s4 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c3);
                            }
                        }
                    }
                    if (s3 !== peg_FAILED) {
                        if (input.charCodeAt(peg_currPos) === 44) {
                            s4 = peg_c47;
                            peg_currPos++;
                        } else {
                            s4 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c48);
                            }
                        }
                        if (s4 !== peg_FAILED) {
                            s5 = [];
                            if (input.charCodeAt(peg_currPos) === 32) {
                                s6 = peg_c2;
                                peg_currPos++;
                            } else {
                                s6 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c3);
                                }
                            }
                            while (s6 !== peg_FAILED) {
                                s5.push(s6);
                                if (input.charCodeAt(peg_currPos) === 32) {
                                    s6 = peg_c2;
                                    peg_currPos++;
                                } else {
                                    s6 = peg_FAILED;
                                    if (peg_silentFails === 0) {
                                        peg_fail(peg_c3);
                                    }
                                }
                            }
                            if (s5 !== peg_FAILED) {
                                s6 = peg_parseledVariable();
                                if (s6 === peg_FAILED) {
                                    s6 = peg_parsenumber();
                                }
                                if (s6 !== peg_FAILED) {
                                    s7 = peg_currPos;
                                    s8 = [];
                                    if (input.charCodeAt(peg_currPos) === 32) {
                                        s9 = peg_c2;
                                        peg_currPos++;
                                    } else {
                                        s9 = peg_FAILED;
                                        if (peg_silentFails === 0) {
                                            peg_fail(peg_c3);
                                        }
                                    }
                                    while (s9 !== peg_FAILED) {
                                        s8.push(s9);
                                        if (input.charCodeAt(peg_currPos) === 32) {
                                            s9 = peg_c2;
                                            peg_currPos++;
                                        } else {
                                            s9 = peg_FAILED;
                                            if (peg_silentFails === 0) {
                                                peg_fail(peg_c3);
                                            }
                                        }
                                    }
                                    if (s8 !== peg_FAILED) {
                                        if (input.charCodeAt(peg_currPos) === 44) {
                                            s9 = peg_c47;
                                            peg_currPos++;
                                        } else {
                                            s9 = peg_FAILED;
                                            if (peg_silentFails === 0) {
                                                peg_fail(peg_c48);
                                            }
                                        }
                                        if (s9 !== peg_FAILED) {
                                            s10 = [];
                                            if (input.charCodeAt(peg_currPos) === 32) {
                                                s11 = peg_c2;
                                                peg_currPos++;
                                            } else {
                                                s11 = peg_FAILED;
                                                if (peg_silentFails === 0) {
                                                    peg_fail(peg_c3);
                                                }
                                            }
                                            while (s11 !== peg_FAILED) {
                                                s10.push(s11);
                                                if (input.charCodeAt(peg_currPos) === 32) {
                                                    s11 = peg_c2;
                                                    peg_currPos++;
                                                } else {
                                                    s11 = peg_FAILED;
                                                    if (peg_silentFails === 0) {
                                                        peg_fail(peg_c3);
                                                    }
                                                }
                                            }
                                            if (s10 !== peg_FAILED) {
                                                s11 = peg_parseledVariable();
                                                if (s11 !== peg_FAILED) {
                                                    s12 = [];
                                                    if (input.charCodeAt(peg_currPos) === 32) {
                                                        s13 = peg_c2;
                                                        peg_currPos++;
                                                    } else {
                                                        s13 = peg_FAILED;
                                                        if (peg_silentFails === 0) {
                                                            peg_fail(peg_c3);
                                                        }
                                                    }
                                                    while (s13 !== peg_FAILED) {
                                                        s12.push(s13);
                                                        if (input.charCodeAt(peg_currPos) === 32) {
                                                            s13 = peg_c2;
                                                            peg_currPos++;
                                                        } else {
                                                            s13 = peg_FAILED;
                                                            if (peg_silentFails === 0) {
                                                                peg_fail(peg_c3);
                                                            }
                                                        }
                                                    }
                                                    if (s12 !== peg_FAILED) {
                                                        s13 = [];
                                                        if (input.charCodeAt(peg_currPos) === 10) {
                                                            s14 = peg_c0;
                                                            peg_currPos++;
                                                        } else {
                                                            s14 = peg_FAILED;
                                                            if (peg_silentFails === 0) {
                                                                peg_fail(peg_c1);
                                                            }
                                                        }
                                                        while (s14 !== peg_FAILED) {
                                                            s13.push(s14);
                                                            if (input.charCodeAt(peg_currPos) === 10) {
                                                                s14 = peg_c0;
                                                                peg_currPos++;
                                                            } else {
                                                                s14 = peg_FAILED;
                                                                if (peg_silentFails === 0) {
                                                                    peg_fail(peg_c1);
                                                                }
                                                            }
                                                        }
                                                        if (s13 !== peg_FAILED) {
                                                            s8 = [s8, s9, s10, s11, s12, s13];
                                                            s7 = s8;
                                                        } else {
                                                            peg_currPos = s7;
                                                            s7 = peg_FAILED;
                                                        }
                                                    } else {
                                                        peg_currPos = s7;
                                                        s7 = peg_FAILED;
                                                    }
                                                } else {
                                                    peg_currPos = s7;
                                                    s7 = peg_FAILED;
                                                }
                                            } else {
                                                peg_currPos = s7;
                                                s7 = peg_FAILED;
                                            }
                                        } else {
                                            peg_currPos = s7;
                                            s7 = peg_FAILED;
                                        }
                                    } else {
                                        peg_currPos = s7;
                                        s7 = peg_FAILED;
                                    }
                                    if (s7 === peg_FAILED) {
                                        s7 = null;
                                    }
                                    if (s7 !== peg_FAILED) {
                                        peg_savedPos = s0;
                                        s1 = peg_c95(s1, s2, s6, s7);
                                        s0 = s1;
                                    } else {
                                        peg_currPos = s0;
                                        s0 = peg_FAILED;
                                    }
                                } else {
                                    peg_currPos = s0;
                                    s0 = peg_FAILED;
                                }
                            } else {
                                peg_currPos = s0;
                                s0 = peg_FAILED;
                            }
                        } else {
                            peg_currPos = s0;
                            s0 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parsetrigger_command() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 8).toLowerCase() === peg_c96) {
                s1 = input.substr(peg_currPos, 8);
                peg_currPos += 8;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c97);
                }
            }
            if (s1 !== peg_FAILED) {
                if (input.substr(peg_currPos, 1).toLowerCase() === peg_c98) {
                    s2 = input.charAt(peg_currPos);
                    peg_currPos++;
                } else {
                    s2 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c99);
                    }
                }
                if (s2 === peg_FAILED) {
                    if (input.substr(peg_currPos, 1).toLowerCase() === peg_c100) {
                        s2 = input.charAt(peg_currPos);
                        peg_currPos++;
                    } else {
                        s2 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c101);
                        }
                    }
                }
                if (s2 !== peg_FAILED) {
                    if (input.charCodeAt(peg_currPos) === 123) {
                        s3 = peg_c102;
                        peg_currPos++;
                    } else {
                        s3 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c103);
                        }
                    }
                    if (s3 !== peg_FAILED) {
                        s4 = peg_parsenumber();
                        if (s4 !== peg_FAILED) {
                            if (input.charCodeAt(peg_currPos) === 125) {
                                s5 = peg_c104;
                                peg_currPos++;
                            } else {
                                s5 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c105);
                                }
                            }
                            if (s5 !== peg_FAILED) {
                                peg_savedPos = s0;
                                s1 = peg_c106(s2, s4);
                                s0 = s1;
                            } else {
                                peg_currPos = s0;
                                s0 = peg_FAILED;
                            }
                        } else {
                            peg_currPos = s0;
                            s0 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }

        function peg_parsejump_command() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

            s0 = peg_currPos;
            if (input.substr(peg_currPos, 4).toLowerCase() === peg_c107) {
                s1 = input.substr(peg_currPos, 4);
                peg_currPos += 4;
            } else {
                s1 = peg_FAILED;
                if (peg_silentFails === 0) {
                    peg_fail(peg_c108);
                }
            }
            if (s1 === peg_FAILED) {
                if (input.substr(peg_currPos, 3).toLowerCase() === peg_c109) {
                    s1 = input.substr(peg_currPos, 3);
                    peg_currPos += 3;
                } else {
                    s1 = peg_FAILED;
                    if (peg_silentFails === 0) {
                        peg_fail(peg_c110);
                    }
                }
                if (s1 === peg_FAILED) {
                    if (input.substr(peg_currPos, 4).toLowerCase() === peg_c111) {
                        s1 = input.substr(peg_currPos, 4);
                        peg_currPos += 4;
                    } else {
                        s1 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c112);
                        }
                    }
                    if (s1 === peg_FAILED) {
                        if (input.substr(peg_currPos, 3).toLowerCase() === peg_c113) {
                            s1 = input.substr(peg_currPos, 3);
                            peg_currPos += 3;
                        } else {
                            s1 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c114);
                            }
                        }
                    }
                }
            }
            if (s1 !== peg_FAILED) {
                s2 = peg_parseledVariable();
                if (s2 !== peg_FAILED) {
                    s3 = [];
                    if (input.charCodeAt(peg_currPos) === 32) {
                        s4 = peg_c2;
                        peg_currPos++;
                    } else {
                        s4 = peg_FAILED;
                        if (peg_silentFails === 0) {
                            peg_fail(peg_c3);
                        }
                    }
                    while (s4 !== peg_FAILED) {
                        s3.push(s4);
                        if (input.charCodeAt(peg_currPos) === 32) {
                            s4 = peg_c2;
                            peg_currPos++;
                        } else {
                            s4 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c3);
                            }
                        }
                    }
                    if (s3 !== peg_FAILED) {
                        if (input.charCodeAt(peg_currPos) === 44) {
                            s4 = peg_c47;
                            peg_currPos++;
                        } else {
                            s4 = peg_FAILED;
                            if (peg_silentFails === 0) {
                                peg_fail(peg_c48);
                            }
                        }
                        if (s4 !== peg_FAILED) {
                            s5 = [];
                            if (input.charCodeAt(peg_currPos) === 32) {
                                s6 = peg_c2;
                                peg_currPos++;
                            } else {
                                s6 = peg_FAILED;
                                if (peg_silentFails === 0) {
                                    peg_fail(peg_c3);
                                }
                            }
                            while (s6 !== peg_FAILED) {
                                s5.push(s6);
                                if (input.charCodeAt(peg_currPos) === 32) {
                                    s6 = peg_c2;
                                    peg_currPos++;
                                } else {
                                    s6 = peg_FAILED;
                                    if (peg_silentFails === 0) {
                                        peg_fail(peg_c3);
                                    }
                                }
                            }
                            if (s5 !== peg_FAILED) {
                                s6 = peg_parseledVariable();
                                if (s6 !== peg_FAILED) {
                                    s7 = [];
                                    if (input.charCodeAt(peg_currPos) === 32) {
                                        s8 = peg_c2;
                                        peg_currPos++;
                                    } else {
                                        s8 = peg_FAILED;
                                        if (peg_silentFails === 0) {
                                            peg_fail(peg_c3);
                                        }
                                    }
                                    while (s8 !== peg_FAILED) {
                                        s7.push(s8);
                                        if (input.charCodeAt(peg_currPos) === 32) {
                                            s8 = peg_c2;
                                            peg_currPos++;
                                        } else {
                                            s8 = peg_FAILED;
                                            if (peg_silentFails === 0) {
                                                peg_fail(peg_c3);
                                            }
                                        }
                                    }
                                    if (s7 !== peg_FAILED) {
                                        if (input.charCodeAt(peg_currPos) === 44) {
                                            s8 = peg_c47;
                                            peg_currPos++;
                                        } else {
                                            s8 = peg_FAILED;
                                            if (peg_silentFails === 0) {
                                                peg_fail(peg_c48);
                                            }
                                        }
                                        if (s8 !== peg_FAILED) {
                                            s9 = [];
                                            if (input.charCodeAt(peg_currPos) === 32) {
                                                s10 = peg_c2;
                                                peg_currPos++;
                                            } else {
                                                s10 = peg_FAILED;
                                                if (peg_silentFails === 0) {
                                                    peg_fail(peg_c3);
                                                }
                                            }
                                            while (s10 !== peg_FAILED) {
                                                s9.push(s10);
                                                if (input.charCodeAt(peg_currPos) === 32) {
                                                    s10 = peg_c2;
                                                    peg_currPos++;
                                                } else {
                                                    s10 = peg_FAILED;
                                                    if (peg_silentFails === 0) {
                                                        peg_fail(peg_c3);
                                                    }
                                                }
                                            }
                                            if (s9 !== peg_FAILED) {
                                                s10 = peg_parseledLabelName();
                                                if (s10 !== peg_FAILED) {
                                                    s11 = [];
                                                    if (input.charCodeAt(peg_currPos) === 32) {
                                                        s12 = peg_c2;
                                                        peg_currPos++;
                                                    } else {
                                                        s12 = peg_FAILED;
                                                        if (peg_silentFails === 0) {
                                                            peg_fail(peg_c3);
                                                        }
                                                    }
                                                    while (s12 !== peg_FAILED) {
                                                        s11.push(s12);
                                                        if (input.charCodeAt(peg_currPos) === 32) {
                                                            s12 = peg_c2;
                                                            peg_currPos++;
                                                        } else {
                                                            s12 = peg_FAILED;
                                                            if (peg_silentFails === 0) {
                                                                peg_fail(peg_c3);
                                                            }
                                                        }
                                                    }
                                                    if (s11 !== peg_FAILED) {
                                                        s12 = [];
                                                        if (input.charCodeAt(peg_currPos) === 10) {
                                                            s13 = peg_c0;
                                                            peg_currPos++;
                                                        } else {
                                                            s13 = peg_FAILED;
                                                            if (peg_silentFails === 0) {
                                                                peg_fail(peg_c1);
                                                            }
                                                        }
                                                        while (s13 !== peg_FAILED) {
                                                            s12.push(s13);
                                                            if (input.charCodeAt(peg_currPos) === 10) {
                                                                s13 = peg_c0;
                                                                peg_currPos++;
                                                            } else {
                                                                s13 = peg_FAILED;
                                                                if (peg_silentFails === 0) {
                                                                    peg_fail(peg_c1);
                                                                }
                                                            }
                                                        }
                                                        if (s12 !== peg_FAILED) {
                                                            peg_savedPos = s0;
                                                            s1 = peg_c115(s1, s2, s6, s10);
                                                            s0 = s1;
                                                        } else {
                                                            peg_currPos = s0;
                                                            s0 = peg_FAILED;
                                                        }
                                                    } else {
                                                        peg_currPos = s0;
                                                        s0 = peg_FAILED;
                                                    }
                                                } else {
                                                    peg_currPos = s0;
                                                    s0 = peg_FAILED;
                                                }
                                            } else {
                                                peg_currPos = s0;
                                                s0 = peg_FAILED;
                                            }
                                        } else {
                                            peg_currPos = s0;
                                            s0 = peg_FAILED;
                                        }
                                    } else {
                                        peg_currPos = s0;
                                        s0 = peg_FAILED;
                                    }
                                } else {
                                    peg_currPos = s0;
                                    s0 = peg_FAILED;
                                }
                            } else {
                                peg_currPos = s0;
                                s0 = peg_FAILED;
                            }
                        } else {
                            peg_currPos = s0;
                            s0 = peg_FAILED;
                        }
                    } else {
                        peg_currPos = s0;
                        s0 = peg_FAILED;
                    }
                } else {
                    peg_currPos = s0;
                    s0 = peg_FAILED;
                }
            } else {
                peg_currPos = s0;
                s0 = peg_FAILED;
            }

            return s0;
        }


        var labels = [];
        var forwardDeclaration = [];
        var compiledProgram = [];
        var enginesProgram = [];
        var currentPosition = 0;
        var currentSegment = "data";
        var debug = false;

        //############################
        function getLabelPosition(name, positionInCode) {

            // first determine the segment in which this label is
            var startOfSegment = enginesProgram[0].position;
            enginesProgram.forEach(function findSegment(currentSegment) {
                if (currentSegment.position < positionInCode) {
                    startOfSegment = currentSegment.position;
                }
            });

            // then find the postion in the code (irrelevant of segments)
            var positionOfLabel = -1;
            labels.forEach(function findPosition(currentLabel) {
                if (currentLabel.name == name) {
                    positionOfLabel = currentLabel.position;
                    if (currentLabel.segment == 'data') startOfSegment = 0;
                }
            });
            var realPosition = positionOfLabel - startOfSegment;
            return realPosition;
        }


        //############################
        function binaryToNumber(numberAsZeroOnes) {
            var numberAsDecimal = 0;
            var highestPower = numberAsZeroOnes.length - 1;


            numberAsZeroOnes.forEach(function decodeBinary(currentBit) {

                numberAsDecimal = numberAsDecimal + (Math.pow(2, highestPower) * currentBit);
                highestPower--;
            });

            return numberAsDecimal; //numberAsDecimal;
        }


        peg_result = peg_startRuleFunction();

        if (peg_result !== peg_FAILED && peg_currPos === input.length) {
            return peg_result;
        } else {
            if (peg_result !== peg_FAILED && peg_currPos < input.length) {
                peg_fail({type: "end", description: "end of input"});
            }

            throw peg_buildException(
                null,
                peg_maxFailExpected,
                peg_maxFailPos < input.length ? input.charAt(peg_maxFailPos) : null,
                peg_maxFailPos < input.length
                    ? peg_computeLocation(peg_maxFailPos, peg_maxFailPos + 1)
                    : peg_computeLocation(peg_maxFailPos, peg_maxFailPos)
            );
        }
    }

    return {
        SyntaxError: peg_SyntaxError,
        parse: pegParse
    };
})();
